'use strict';Object.defineProperty(exports,'__esModule',{value:true});function isBindingValueValid(bindingValue) {
  if (bindingValue) {
    if (bindingValue.threshold) {
      if (bindingValue.callback && typeof bindingValue.callback === 'function') {
        return true;
      }
    }
  }

  return false;
}

function getRelativeScrollPositionToElement(el) {
  var currentScroll = window.pageYOffset || window.scrollTop || 0;
  var elementScroll = el.offsetTop || 0;
  return currentScroll - elementScroll;
}

function scrollPosition(el, threshold) {
  var scrollRelativePos = getRelativeScrollPositionToElement(el);

  if (scrollRelativePos < 0) {
    return -1;
  } else if (scrollRelativePos >= 0 && scrollRelativePos <= threshold) {
    return 0;
  } else {
    return 1;
  }
}

function isAlongDirection(modifiers, offset) {
  var direction = 'down';

  if (offset > 0) {
    direction = 'up';
  }

  if (modifiers[direction]) {
    return true;
  }

  return false;
}

var directive = {
  bind: function bind(el, binding) {
    if (!isBindingValueValid(binding.value)) {
      return;
    }

    var callback = binding.value.callback;
    var startingRelativeScrollPos = scrollPosition(el, binding.value.threshold);
    var lastScrollPos = window.pageYOffset || window.scrollTop || 0;
    var lastWasAlong = false;

    var f = function scrollHandler() {
      var newRelativeScrollPos = scrollPosition(el, binding.value.threshold);
      var newScrollPos = window.pageYOffset || window.scrollTop || 0;
      var offset = lastScrollPos - newScrollPos;
      lastScrollPos = newScrollPos;
      var newDirectionStatus = isAlongDirection(binding.modifiers, offset);

      if (newRelativeScrollPos !== startingRelativeScrollPos || lastWasAlong !== newDirectionStatus) {
        startingRelativeScrollPos = newRelativeScrollPos;
        lastWasAlong = newDirectionStatus;
        callback(newRelativeScrollPos, newDirectionStatus);
      }
    };

    window.addEventListener('scroll', f, {
      passive: true
    });
    callback(startingRelativeScrollPos, false);
    el._onScrollThreshold = callback;
  },
  unbind: function unbind(el) {
    if (!el._onScrollThreshold) return;
    var callback = el._onScrollThreshold;
    window.removeEventListener('scroll', callback);
    delete el._onScrollThreshold;
  }
};var install = function installVScrollThreshold(Vue) {
  if (install.installed) return;
  install.installed = true;
  Vue.directive('ScrollThreshold', directive);
};

var plugin = {
  install: install
}; // To auto-install when vue is found
// eslint-disable-next-line no-redeclare

/* global window, global */

var GlobalVue = null;

if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}

if (GlobalVue) {
  GlobalVue.use(plugin);
}

directive.install = install;exports.default=directive;