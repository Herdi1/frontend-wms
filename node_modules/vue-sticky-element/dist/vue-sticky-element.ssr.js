'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopDefault(e){return(e&&(typeof e==='object')&&'default'in e)?e['default']:e}var thresholdPlugin=_interopDefault(require('v-scroll-threshold'));function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}// took from https://stackoverflow.com/questions/51065172/how-can-i-duplicate-slots-within-a-vuejs-render-function
function cloneVNode(vnode, createElement) {
  var clonedChildren = vnode.children && vnode.children.map(function (vnode) {
    return cloneVNode(vnode, createElement);
  });
  var cloned = createElement(vnode.tag, vnode.data, clonedChildren);
  cloned.text = vnode.text;
  cloned.isComment = vnode.isComment;
  cloned.componentOptions = vnode.componentOptions;
  cloned.elm = vnode.elm;
  cloned.context = vnode.context;
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  return cloned;
}

var script = {
  props: {
    visibleOnDirection: {
      type: String,
      default: 'up',
      validator: function validator(val) {
        return ['up', 'down', 'disabled'].includes(val);
      }
    },
    stickMode: {
      type: String,
      default: 'element-end',
      validator: function validator(val) {
        return ['element-end', 'element-start'].includes(val);
      }
    },
    stuckClass: {
      type: String,
      default: 'vue-sticky-element--stuck'
    },
    showClass: {
      type: String,
      default: 'vue-sticky-element--show'
    },
    hideClass: {
      type: String,
      default: 'vue-sticky-element--hide'
    },
    transitionClass: {
      type: String,
      default: 'vue-sticky-element--transition'
    },
    transitionDuration: {
      type: Number,
      default: 100
    }
  },
  data: function data() {
    return {
      navbarStuck: false,
      navbarShow: false,
      applyTransition: false,
      height: undefined,
      forceHide: false
    };
  },
  computed: {
    alwaysStick: function alwaysStick() {
      return this.visibleOnDirection === 'disabled';
    },
    shouldApplyTransition: function shouldApplyTransition() {
      return !this.alwaysStick;
    },
    stickWithElementStart: function stickWithElementStart() {
      return this.stickMode === 'element-start';
    }
  },
  mounted: function mounted() {
    this.$root.$on('vse::hide', this.addHide);
    this.$root.$on('vse::show', this.removeHide);
    this.height = this.$el.clientHeight;
  },
  methods: {
    addHide: function addHide() {
      this.forceHide = true;
    },
    removeHide: function removeHide() {
      this.forceHide = false;
    },
    toggleStickiness: function toggleStickiness(relativeScrollPosToElement, goingStickyDirection) {
      var _this = this;

      if (relativeScrollPosToElement < 0) {
        this.navbarStuck = false;

        if (this.shouldApplyTransition) {
          this.$nextTick().then(function () {
            _this.applyTransition = false;
          });
        }
      } else if (relativeScrollPosToElement > 0) {
        this.height = this.$el.clientHeight;
        this.navbarStuck = true;

        if (this.shouldApplyTransition) {
          this.$nextTick().then(function () {
            setTimeout(function () {
              _this.applyTransition = true;
            }, _this.transitionDuration);
          });
        }
      }

      if (this.navbarStuck && (goingStickyDirection || this.alwaysStick)) {
        this.navbarShow = true;
      } else {
        this.navbarShow = false;
      }
    }
  },
  render: function render(h) {
    var _objectSpread3;

    var children = this.$slots.default;

    if (!(children && children[0])) {
      return h();
    }

    var child = cloneVNode(children[0], h); // Credits of few lines below goes to vue-fixed-header

    child.data = child.data || {
      class: ''
    };

    if (typeof child.data.class === 'string') {
      child.data.class = child.data.class.split(' ');
    }

    if (Array.isArray(child.data.class)) {
      child.data.class = _toConsumableArray(child.data.class).reduce(function (a, b) {
        return _objectSpread2(_objectSpread2({}, a), {}, _defineProperty({}, b, true));
      }, {});
    }

    child.data.class = _objectSpread2(_objectSpread2({}, child.data.class), {}, (_objectSpread3 = {
      'vue-sticky-element': true
    }, _defineProperty(_objectSpread3, this.stuckClass, this.navbarStuck), _defineProperty(_objectSpread3, this.showClass, this.navbarShow), _defineProperty(_objectSpread3, this.hideClass, this.forceHide), _defineProperty(_objectSpread3, this.transitionClass, this.applyTransition), _objectSpread3));
    child.data.class = Object.entries(child.data.class).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          k = _ref2[0],
          v = _ref2[1];

      return v ? k : null;
    }).filter(function (v) {
      return v;
    }).join(' '); // end of credit :)

    if (!child.data.style) {
      child.data.style = {};
    }

    var style = {};
    var directives = [];

    if (this.height) {
      style.height = "".concat(this.height, "px");
      directives.push({
        name: 'scroll-threshold',
        value: {
          threshold: this.stickWithElementStart ? 0 : this.height,
          callback: this.toggleStickiness
        },
        modifiers: _defineProperty({}, this.visibleOnDirection, true)
      });
    }

    return h('div', {
      style: style,
      directives: directives
    }, [child]);
  }
};function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}function createInjectorSSR(context) {
    if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
    }
    if (!context)
        return () => { };
    if (!('styles' in context)) {
        context._styles = context._styles || {};
        Object.defineProperty(context, 'styles', {
            enumerable: true,
            get: () => context._renderStyles(context._styles)
        });
        context._renderStyles = context._renderStyles || renderStyles;
    }
    return (id, style) => addStyle(id, style, context);
}
function addStyle(id, css, context) {
    const group =  css.media || 'default' ;
    const style = context._styles[group] || (context._styles[group] = { ids: [], css: '' });
    if (!style.ids.includes(id)) {
        style.media = css.media;
        style.ids.push(id);
        let code = css.source;
        style.css += code + '\n';
    }
}
function renderStyles(styles) {
    let css = '';
    for (const key in styles) {
        const style = styles[key];
        css +=
            '<style data-vue-ssr-id="' +
                Array.from(style.ids).join(' ') +
                '"' +
                (style.media ? ' media="' + style.media + '"' : '') +
                '>' +
                style.css +
                '</style>';
    }
    return css;
}/* script */
var __vue_script__ = script;
/* template */

/* style */

var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-c5f8968c_0", {
    source: ".vue-sticky-element{will-change:transform}.vue-sticky-element--transition{transition:transform .1s ease}.vue-sticky-element--stuck{width:100%;position:fixed!important;top:0;transform:translateY(-100%);z-index:10}.vue-sticky-element--show{transform:translateY(0)}.vue-sticky-element--hide{transform:translateY(-100%)!important}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__ = undefined;
/* module identifier */

var __vue_module_identifier__ = "data-v-c5f8968c";
/* functional template */

var __vue_is_functional_template__ = undefined;
/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, createInjectorSSR, undefined);// Import vue component

var install = function installVueStickyElement(Vue) {
  if (install.installed) return;
  install.installed = true;
  Vue.component('VueStickyElement', __vue_component__);
  Vue.use(thresholdPlugin);
}; // Create module definition for Vue.use()


var plugin = {
  install: install
}; // To auto-install when vue is found
// eslint-disable-next-line no-redeclare

/* global window, global */

var GlobalVue = null;

if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}

if (GlobalVue) {
  GlobalVue.use(plugin);
} // Inject install function into component - allows component
// to be registered via Vue.use() as well as Vue.component()


__vue_component__.install = install; // Export component by default
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = component;
exports.default=__vue_component__;