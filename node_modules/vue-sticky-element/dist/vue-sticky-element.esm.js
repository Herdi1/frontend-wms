import thresholdPlugin from 'v-scroll-threshold';

// took from https://stackoverflow.com/questions/51065172/how-can-i-duplicate-slots-within-a-vuejs-render-function
function cloneVNode(vnode, createElement) {
  const clonedChildren = vnode.children && vnode.children.map(vnode => cloneVNode(vnode, createElement));
  const cloned = createElement(vnode.tag, vnode.data, clonedChildren);
  cloned.text = vnode.text;
  cloned.isComment = vnode.isComment;
  cloned.componentOptions = vnode.componentOptions;
  cloned.elm = vnode.elm;
  cloned.context = vnode.context;
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  return cloned;
}

var script = {
  props: {
    visibleOnDirection: {
      type: String,
      default: 'up',
      validator: val => ['up', 'down', 'disabled'].includes(val)
    },
    stickMode: {
      type: String,
      default: 'element-end',
      validator: val => ['element-end', 'element-start'].includes(val)
    },
    stuckClass: {
      type: String,
      default: 'vue-sticky-element--stuck'
    },
    showClass: {
      type: String,
      default: 'vue-sticky-element--show'
    },
    hideClass: {
      type: String,
      default: 'vue-sticky-element--hide'
    },
    transitionClass: {
      type: String,
      default: 'vue-sticky-element--transition'
    },
    transitionDuration: {
      type: Number,
      default: 100
    }
  },

  data() {
    return {
      navbarStuck: false,
      navbarShow: false,
      applyTransition: false,
      height: undefined,
      forceHide: false
    };
  },

  computed: {
    alwaysStick() {
      return this.visibleOnDirection === 'disabled';
    },

    shouldApplyTransition() {
      return !this.alwaysStick;
    },

    stickWithElementStart() {
      return this.stickMode === 'element-start';
    }

  },

  mounted() {
    this.$root.$on('vse::hide', this.addHide);
    this.$root.$on('vse::show', this.removeHide);
    this.height = this.$el.clientHeight;
  },

  methods: {
    addHide() {
      this.forceHide = true;
    },

    removeHide() {
      this.forceHide = false;
    },

    toggleStickiness(relativeScrollPosToElement, goingStickyDirection) {
      if (relativeScrollPosToElement < 0) {
        this.navbarStuck = false;

        if (this.shouldApplyTransition) {
          this.$nextTick().then(() => {
            this.applyTransition = false;
          });
        }
      } else if (relativeScrollPosToElement > 0) {
        this.height = this.$el.clientHeight;
        this.navbarStuck = true;

        if (this.shouldApplyTransition) {
          this.$nextTick().then(() => {
            setTimeout(() => {
              this.applyTransition = true;
            }, this.transitionDuration);
          });
        }
      }

      if (this.navbarStuck && (goingStickyDirection || this.alwaysStick)) {
        this.navbarShow = true;
      } else {
        this.navbarShow = false;
      }
    }

  },

  render(h) {
    const children = this.$slots.default;

    if (!(children && children[0])) {
      return h();
    }

    const child = cloneVNode(children[0], h); // Credits of few lines below goes to vue-fixed-header

    child.data = child.data || {
      class: ''
    };

    if (typeof child.data.class === 'string') {
      child.data.class = child.data.class.split(' ');
    }

    if (Array.isArray(child.data.class)) {
      child.data.class = [...child.data.class].reduce((a, b) => ({ ...a,
        [b]: true
      }), {});
    }

    child.data.class = { ...child.data.class,
      'vue-sticky-element': true,
      [this.stuckClass]: this.navbarStuck,
      [this.showClass]: this.navbarShow,
      [this.hideClass]: this.forceHide,
      [this.transitionClass]: this.applyTransition
    };
    child.data.class = Object.entries(child.data.class).map(([k, v]) => v ? k : null).filter(v => v).join(' '); // end of credit :)

    if (!child.data.style) {
      child.data.style = {};
    }

    const style = {};
    const directives = [];

    if (this.height) {
      style.height = `${this.height}px`;
      directives.push({
        name: 'scroll-threshold',
        value: {
          threshold: this.stickWithElementStart ? 0 : this.height,
          callback: this.toggleStickiness
        },
        modifiers: {
          [this.visibleOnDirection]: true
        }
      });
    }

    return h('div', {
      style,
      directives
    }, [child]);
  }

};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

const isOldIE = typeof navigator !== 'undefined' &&
    /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
    return (id, style) => addStyle(id, style);
}
let HEAD;
const styles = {};
function addStyle(id, css) {
    const group = isOldIE ? css.media || 'default' : id;
    const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
    if (!style.ids.has(id)) {
        style.ids.add(id);
        let code = css.source;
        if (css.map) {
            // https://developer.chrome.com/devtools/docs/javascript-debugging
            // this makes source maps inside style tags work properly in Chrome
            code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
            // http://stackoverflow.com/a/26603875
            code +=
                '\n/*# sourceMappingURL=data:application/json;base64,' +
                    btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                    ' */';
        }
        if (!style.element) {
            style.element = document.createElement('style');
            style.element.type = 'text/css';
            if (css.media)
                style.element.setAttribute('media', css.media);
            if (HEAD === undefined) {
                HEAD = document.head || document.getElementsByTagName('head')[0];
            }
            HEAD.appendChild(style.element);
        }
        if ('styleSheet' in style.element) {
            style.styles.push(code);
            style.element.styleSheet.cssText = style.styles
                .filter(Boolean)
                .join('\n');
        }
        else {
            const index = style.ids.size - 1;
            const textNode = document.createTextNode(code);
            const nodes = style.element.childNodes;
            if (nodes[index])
                style.element.removeChild(nodes[index]);
            if (nodes.length)
                style.element.insertBefore(textNode, nodes[index]);
            else
                style.element.appendChild(textNode);
        }
    }
}

/* script */
const __vue_script__ = script;
/* template */

/* style */

const __vue_inject_styles__ = function (inject) {
  if (!inject) return;
  inject("data-v-c5f8968c_0", {
    source: ".vue-sticky-element{will-change:transform}.vue-sticky-element--transition{transition:transform .1s ease}.vue-sticky-element--stuck{width:100%;position:fixed!important;top:0;transform:translateY(-100%);z-index:10}.vue-sticky-element--show{transform:translateY(0)}.vue-sticky-element--hide{transform:translateY(-100%)!important}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


const __vue_scope_id__ = undefined;
/* module identifier */

const __vue_module_identifier__ = undefined;
/* functional template */

const __vue_is_functional_template__ = undefined;
/* style inject SSR */

/* style inject shadow dom */

const __vue_component__ = /*#__PURE__*/normalizeComponent({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, createInjector, undefined, undefined);

// Import vue component

const install = function installVueStickyElement(Vue) {
  if (install.installed) return;
  install.installed = true;
  Vue.component('VueStickyElement', __vue_component__);
  Vue.use(thresholdPlugin);
}; // Create module definition for Vue.use()


const plugin = {
  install
}; // To auto-install when vue is found
// eslint-disable-next-line no-redeclare

/* global window, global */

let GlobalVue = null;

if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}

if (GlobalVue) {
  GlobalVue.use(plugin);
} // Inject install function into component - allows component
// to be registered via Vue.use() as well as Vue.component()


__vue_component__.install = install; // Export component by default
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = component;

export default __vue_component__;
